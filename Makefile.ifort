# This makefile is constructed for GNU make - 4/00.
# Meant for use with a project using modules (with module code in MODDIR)
SRCDIR = ./src
MODDIR = ./mod
MODUTILDIR = ./mod/util

# split f95, and module lists... Modules need to be compiled first
# split into f95, and module lists... Modules need to be compiled first
SRCf95 = $(wildcard $(SRCDIR)/*.f95)
OBJf95 = $(SRCf95:%.f95=%.o)
SRCMODf95 = $(wildcard $(MODDIR)/*.f95)
OBJMODf95 = $(SRCMODf95:%.f95=%.o)
SRCMODUTILf95 = $(wildcard $(MODUTILDIR)/*.f95)
OBJMODUTILf95 = $(SRCMODUTILf95:%.f95=%.o)
INC = $(wildcard $(SRCDIR)/*.inc) 

# for debugging, debug flag and detailed runtime error checking. 
#FLAGS = -g -CB -r8 
# standard compiler optimization
FLAGS = -O2 -r8 
# No compiler optimization
#FLAGS = -r8

# includes in SRCDIR, .mod files in MODDIR
OPT = -I$(SRCDIR) -I$(MODDIR) -I$(MODUTILDIR) $(FLAGS)
LINKOPT = $(FLAGS)
# Include default liblapack.a and libblas.a for LAPACK calculations
LIBS = -llapack -lblas
COMPILER = ifort


# Primary goal: create executable from object files if object files have changed. Depends on OBJMODUTIL, OBJMOD, and OBJ
# Note: Generally, fortran  modules must come first in the compile list... Also, if a module depends on another module in fortran,
# this module must be compiled first so that the subsequent module can see it's .mod file during compile. This appears to be due to the fact that
# the .mod file performs some external function prototyping for the module functions, and since the .mod is autogenerated when a module is compiled,
# these prototypes cant be explicitly included a-priori in the code that uses the module (ala .h files in C). Modules used in
# other modules must be compiled first...
../cactus : $(OBJMODUTILf95) $(OBJMODf95) $(OBJf95)  
	$(COMPILER) -o $@ $(LINKOPT) $(OBJMODUTILf95) $(OBJMODf95) $(OBJf95)   $(LIBS)

# Secondary goals: rules for OBJ. If Makefile or include files are changed, update
$(OBJMODUTILf95) $(OBJMODf95) $(OBJf95) : Makefile.ifort $(INC)

# Further secondary goals for OBJ: If individual source files are changed, update the corresponding OBJ
$(OBJMODUTILf95):$(MODUTILDIR)%.o : $(MODUTILDIR)%.f95 
	$(COMPILER) $(OPT) -c -free -Tf $<
	mv $(@F) ${MODUTILDIR}
	mv *.mod ${MODUTILDIR}

$(OBJMODf95):$(MODDIR)%.o : $(MODDIR)%.f95 
	$(COMPILER) $(OPT) -c -free -Tf $<
	mv $(@F) ${MODDIR}
	mv *.mod ${MODDIR}

$(OBJf95):$(SRCDIR)%.o : $(SRCDIR)%.f95 
	$(COMPILER) $(OPT) -c -free -Tf $<
	mv $(@F) ${SRCDIR}

clean :
	rm -f $(SRCDIR)/*.o
	rm -f $(MODDIR)/*.o
	rm -f $(MODDIR)/*.mod
	rm -f $(MODUTILDIR)/*.o
	rm -f $(MODUTILDIR)/*.mod
